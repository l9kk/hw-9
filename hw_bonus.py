"""
ðŸ’Ž Exercise-1: Two Sum
Write a function "two_sum(nums: list, target: int) -> tuple" that takes a list of integers
and a target integer. It should return a tuple of two indices whose elements add up to the target.
Assume that each input would have exactly one solution, and you may not use the same element twice.

Example:
two_sum([2, 7, 11, 15], 9) -> (0, 1)
"""

def two_sum(nums: list, target: int) -> tuple:
    hash_map = {}
    for i, v in enumerate(nums):
        t = target - v
        if t in hash_map:
            return (hash_map[t], i)
        hash_map[v] = i


"""
ðŸ’Ž Exercise-2: Isomorphic Strings
Write a function "is_isomorphic(s: str, t: str) -> bool" that takes two strings s and t
and determines if they are isomorphic. Two strings s and t are isomorphic if the characters
in s can be replaced to get t, and all characters in s map to exactly one character in t and vice versa.

Example:
is_isomorphic('egg', 'add') -> True
"""

def is_isomorphic(s: str, t: str) -> bool:

    d1 = {}
    d2 = {}
    
    for i in range(len(s)):
        if s[i] in d1:
            if d1[s[i]] != t[i]:
                return False
        else:
            d1[s[i]] = t[i]
        
        if t[i] in d2:
            if d2[t[i]] != s[i]:
                return False
        else:
            d2[t[i]] = s[i]
    
    return True


"""
ðŸ’Ž Exercise-3: Check Alien Dictionary
Write a function "is_alien_sorted(words: list, order: str) -> bool" that checks if words
are sorted lexicographicaly according to a new character order provided in the string order.

Example:
is_alien_sorted(["hello","leetcode"], "hlabcdefgijkmnopqrstuvwxyz") -> True
"""

def is_alien_sorted(words: list, order: str) -> bool:
    hash_map = {char: x for x, char in enumerate(order)}
    
    for i in range(len(words) - 1):
        word1 = words[i]
        word2 = words[i + 1]
        
        for j in range(min(len(word1), len(word2))):
            if hash_map[word1[j]] < hash_map[word2[j]]:
                break
            elif hash_map[word1[j]] > hash_map[word2[j]]:
                return False
        
        if len(word1) > len(word2) and word1[:len(word2)] == word2:
            return False

    return True


"""
ðŸ’Ž Exercise-4: Longest Substring Without Repeating Characters
Write a function "length_of_longest_substring(s: str) -> int" that takes a string s,
and returns the length of the longest substring without repeating characters.

Example:
length_of_longest_substring('abcabcbb') -> 3
"""

def length_of_longest_substring(s: str) -> int:
    index_map = {}
    start, max_len = 0, 0
    
    for end, char in enumerate(s):
        if char in index_map and index_map[char] >= start:
            start = index_map[char] + 1
        index_map[char] = end
        max_len = max(max_len, end - start + 1)
    
    return max_len


"""
ðŸ’Ž Exercise-5: Group Shifted Strings
Write a function "group_shifted(strings: list) -> list" that takes a
list of lowercase strings and groups all strings that are generated by shifting some letters
of another string circularly. Return a list of groups, each group is a list of strings.
Groups and strings within a group can be in any order.

Example:
group_shifted(["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"]) -> [["abc","bcd"],["acef"],["xyz"],["az","ba"],["a","z"]]
"""

from collections import defaultdict

def group_shifted(strings: list) -> list:
    g = defaultdict(list)
    for s in strings:
        diff = ord(s[0]) - ord("a")
        t = []
        for c in s:
            c = ord(c) - diff
            if c < ord("a"):
                c += 26
            t.append(chr(c))
        g["".join(t)].append(s)
    return list(g.values())